--#CODEBASICS CHALLENGE 9

                Analyzing Promotions and Provide Tangible Insights to Sales Director Project
				
--Business Request:


--1.Provide a list of products with a base price greater than 500 and that are featured in promo type of
--BOGOF (Buy One Get One Free). This information will help us identify high-value products that are 
--currently being heavily discounted, which can be useful for evaluating our pricing and promotion 
--strategies. 


--SOL)PRODUCT NAME WITH BASE PRICE > 500 : 


select distinct(product_name) from dim_products inner join
fact_events on 
fact_events.product_code=dim_products.product_code where 
base_price>500 and promo_type='BOGOF';


--2.Generate a report that provides an overview of the number of stores in each city. The results will 
--be sorted in descending order of store counts, allowing us to identify the cities with the highest 
--store presence. The report includes two essential fields: city and store count, which will assist 
--in optimizing our retail operations.


--SOL)CITY ORDER BY COUNT DESE


SELECT
    city,
    COUNT(*) AS store_count
FROM
    dim_stores
GROUP BY
    city
ORDER BY
    store_count DESC;





--3.Generate a report that displays each campaign along with the total revenue generated before
--and after the campaign? The report includes three key fields: campaign name,
--total revenue(before promotion). total revenue(after promotion). This report should help in 
--evaluating the financial impact of our promotional campaigns. (Display the values in millions).

--SOL)TOTAL REVENUE BEFORE PROMO AND AFTER PROMO


-- Total revenue before promotion

SELECT 
    SUM(fe.base_price * fe."quantity_sold(before_promo)") AS total_revenue_before_promo,
    dc.campaign_name
FROM 
    public.fact_events fe
INNER JOIN 
    public.dim_campaigns dc ON dc.campaign_id = fe.campaign_id 
GROUP BY 
    dc.campaign_name;


-- Total revenue after promotion


SELECT 
    SUM(fe.base_price * fe."quantity_sold(after_promo)") AS total_revenue_after_promo,
    dc.campaign_name 
FROM 
    public.fact_events fe
INNER JOIN 
    public.dim_campaigns dc ON dc.campaign_id = fe.campaign_id 
GROUP BY 
    dc.campaign_name;



--4.Produce a report that calculates the Incremental Sold Quantity (ISU) for each catogory during the
--Diwali campaign. Additionally, provide rankings for the categories based on their ISU%, The report will 
--include three key fields: category, isu%, and rank order, This information will assist in assessing the 
--category-wise success and impact of the Diwali campaign on incremental sales,

--Note: ISU% (Incremental Sold Quantity Percentage) is calculated as the percentage increase/decrease in 
--quantity sold (after promo) compared to quantity sold (before promo)CALUCULATE ISU IN DIWALI


--SOL) Analysis of Incremental Sold Quantity during Key Promotional Periods


SELECT 
    (SUM(fe."quantity_sold(after_promo)") - SUM(fe."quantity_sold(before_promo)")) / SUM(fe."quantity_sold(before_promo)") * 100 AS ISU,
    dp."category"
FROM 
    "fact_events" fe
INNER JOIN 
    "dim_campaigns" dc ON dc."campaign_id" = fe."campaign_id"
INNER JOIN 
    "dim_products" dp ON dp."product_code" = fe."product_code"
WHERE 
    dc."campaign_name" = 'Diwali'
GROUP BY 
    dp."category"
ORDER BY 
    ISU;





--5.Create a report featuring the Top 5 products, ranked by Incremental Revenue Percentage (IR%),
--across all campaigns, The report will provide essential information including product name, category, 
--and IR%. This analysis helps. identify the most successful products in terms of incremental revenue 
--across our campaigns, assisting in product optimization, Note: The submissions are evaluated based on 
--the query readability, logic, and also presentation of the results. 


--SOL)TOP 5 PRODUCTS:


SELECT 
    dp.product_name,
    (SUM(fe.base_price * fe."quantity_sold(after_promo)") - SUM(fe.base_price * fe."quantity_sold(before_promo)")) AS IR
FROM 
    fact_events fe
INNER JOIN 
    dim_campaigns dc ON dc.campaign_id = fe.campaign_id
INNER JOIN 
    dim_products dp ON dp.product_code = fe.product_code
GROUP BY 
    dp.product_name
ORDER BY 
    IR DESC
LIMIT 5;

